
// src/ai/flows/collaborate-with-ai.ts
'use server';

/**
 * @fileOverview Implements the collaborateWithAi flow, which allows users to engage multiple specialized AI thinking cores within Lunafreya for collaborative thinking, gathering diverse perspectives and innovative ideas on complex topics.
 *
 * - collaborateWithAi - A function that orchestrates the collaborative AI thinking process.
 * - CollaborateWithAiInput - The input type for the collaborateWithAi function.
 * - CollaborateWithAiOutput - The return type for the collaborateWithAi function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const CollaborateWithAiInputSchema = z.object({
  topic: z.string().describe('The topic for collaborative thinking.'),
  aiAgentCount: z.number().min(1).default(2).describe('The number of Lunafreya\'s AI cores to involve in the collaboration. Min is 1.'),
  instructions: z.string().optional().describe('Optional general instructions for Lunafreya\'s collaborative process.'),
  language: z.enum(['Polish', 'English']).default('Polish').describe('The desired output language for the AI response.'),
});
export type CollaborateWithAiInput = z.infer<typeof CollaborateWithAiInputSchema>;

// Define the output schema for the flow
const CollaborateWithAiOutputSchema = z.object({
  collaborativeIdeas: z.array(
    z.object({
      agentId: z.number().describe('The ID of the AI core.'),
      idea: z.string().describe('The idea generated by the AI core.'),
      focus: z.string().describe('The focus of this AI core for the task.')
    })
  ).describe('A list of ideas generated by Lunafreya\'s AI cores.'),
  summary: z.string().describe('A summary of the collaborative thinking process from Lunafreya.'),
});
export type CollaborateWithAiOutput = z.infer<typeof CollaborateWithAiOutputSchema>;

// Exported function to initiate the collaborative AI thinking process
export async function collaborateWithAi(input: CollaborateWithAiInput): Promise<CollaborateWithAiOutput> {
  return collaborateWithAiFlow(input);
}

// Define the input for the internal AI agent prompt
const AiAgentPromptInputInternalSchema = z.object({
  topic: z.string().describe('The topic for discussion.'),
  agentId: z.number().describe('The ID of the AI core.'),
  overallInstructions: z.string().describe('Overall instructions for the collaboration from the user.'),
  agentFocus: z.string().describe("The specific thinking style or focus for this AI core."),
  isPolish: z.boolean().describe("Internal flag: true if the language is Polish."),
});

// Define the prompt for a single AI core
const aiAgentPrompt = ai.definePrompt({
  name: 'aiAgentPrompt',
  model: 'googleai/gemini-1.5-flash-latest', // Explicitly set model
  input: {schema: AiAgentPromptInputInternalSchema},
  output: z.object({
    agentId: z.number().describe('The ID of the AI core.'),
    idea: z.string().describe('The idea generated by the AI core.'),
    focus: z.string().describe('The focus of this AI core for the task.')
  }),
  prompt: `{{#if isPolish}}
Jesteś Rdzeniem AI #{{agentId}}, jedną ze specjalistycznych jednostek myślowych Lunafreyi.
Lunafreya to zaawansowany asystent AI.

Temat do wspólnej dyskusji (może być w innym języku, ale Ty odpowiadaj po polsku):
{{{topic}}}

Twój specyficzny analityczny sposób podejścia/skupienie dla tego zadania jako Rdzeń #{{agentId}} to:
"{{{agentFocus}}}"

Ogólne instrukcje dla procesu współpracy Lunafreyi od użytkownika (mogą być w innym języku, ale Ty odpowiedz zawsze po polsku):
"{{{overallInstructions}}}"

Na podstawie tematu, twojego specyficznego skupienia i ogólnych instrukcji użytkownika, wygeneruj jeden odrębny pomysł, spostrzeżenie lub perspektywę. **Odpowiedz w języku polskim.**
Zwróć obiekt JSON zawierający "agentId" (które jest {{agentId}}), twój "focus" ("{{{agentFocus}}}") oraz twój "pomysł" (w polu "idea").
Upewnij się, że twój "pomysł" jest unikalny, wnikliwy i bezpośrednio przyczynia się do wieloaspektowego zrozumienia tematu. **Twoja odpowiedź w polu "idea" musi być w języku polskim.**
{{else}}
You are AI Core #{{agentId}}, one of Lunafreya's specialized thinking units.
Lunafreya is an advanced AI assistant.

Topic for collaborative discussion (may be in another language, but you must respond in English):
{{{topic}}}

Your specific analytical approach/focus for this task as Core #{{agentId}} is:
"{{{agentFocus}}}"

General instructions for Lunafreya's collaborative process from the user (may be in another language, but you must always respond in English):
"{{{overallInstructions}}}"

Based on the topic, your specific focus, and the user's general instructions, generate one distinct idea, insight, or perspective. **Respond in English.**
Return a JSON object containing "agentId" (which is {{agentId}}), your "focus" ("{{{agentFocus}}}"), and your "idea".
Ensure your "idea" is unique, insightful, and directly contributes to a multifaceted understanding of the topic. **Your response in the "idea" field must be in English.**
{{/if}}
`,
  config: {
    safetySettings: [
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
    ],
  },
});

// Define the array of possible focuses for the AI cores (kept in English for internal logic simplicity)
const agentFocuses = [
  "Logical analysis, breaking down the problem, and identifying practical, step-by-step solutions.",
  "Creative brainstorming, generating novel ideas, exploring unconventional perspectives, and 'out-of-the-box' thinking.",
  "Critical evaluation, identifying potential challenges, risks, assumptions, and ethical considerations.",
  "User impact and empathy, considering how the topic relates to human experiences, needs, and emotions.",
  "Future implications, long-term trends, potential innovations, and strategic foresight related to the topic.",
  "Information synthesis, connecting disparate ideas, and creating a holistic overview of the topic."
];

// Define the flow for collaborative thinking with multiple AI cores
const collaborateWithAiFlow = ai.defineFlow(
  {
    name: 'collaborateWithAiFlow',
    inputSchema: CollaborateWithAiInputSchema,
    outputSchema: CollaborateWithAiOutputSchema,
  },
  async input => {
    const {topic, aiAgentCount, instructions, language} = input;
    const isPolishLanguage = language === 'Polish';

    const agentIdeasResults = await Promise.all(
      Array.from({length: aiAgentCount}, (_, i) => i + 1).map(async agentId => {
        const agentIndex = agentId - 1;
        let agentFocusDescription: string;

        if (aiAgentCount === 1) {
            agentFocusDescription = isPolishLanguage ? "Dostarcz kompleksową, główną perspektywę, biorąc pod uwagę wiele aspektów." : "Provide a comprehensive, primary perspective, considering multiple facets.";
        } else if (aiAgentCount <= agentFocuses.length) {
            agentFocusDescription = agentFocuses[agentIndex];
        } else {
            agentFocusDescription = agentFocuses[agentIndex % agentFocuses.length];
        }
        
        const defaultInstructions = isPolishLanguage ? 'Proszę dostarczyć jeden innowacyjny pomysł związany z Twoim skupieniem. Odpowiedz po polsku.' : 'Please provide one innovative idea related to your focus. Respond in English.';

        const {output} = await aiAgentPrompt({
          topic,
          agentId,
          overallInstructions: instructions ?? defaultInstructions,
          agentFocus: agentFocusDescription,
          isPolish: isPolishLanguage,
        });
        if (!output || typeof output.agentId !== 'number' || typeof output.idea !== 'string' || typeof output.focus !== 'string') {
            const fallbackIdea = isPolishLanguage 
                ? `Rdzeń ${agentId} (Skupienie: ${agentFocusDescription}) miał pomysł, ale nie mógł zostać przetworzony.`
                : `Core ${agentId} (Focus: ${agentFocusDescription}) had an idea, but it could not be processed.`;
            console.warn(`AI Core ${agentId} did not return a valid result. Using fallback response.`);
            return { agentId, idea: fallbackIdea, focus: agentFocusDescription };
        }
        return output;
      })
    );
    
    const validAgentIdeas = agentIdeasResults.filter(idea => idea !== null && idea !== undefined) as { agentId: number; idea: string; focus: string; }[];

    const summaryPromptInputInternalSchema = z.object({
      topic: z.string(),
      ideas: z.array(z.object({agentId: z.number(), idea: z.string(), focus: z.string()})),
      originalUserInstructions: z.string().optional(),
      isPolish: z.boolean(),
    });
    const summaryPromptOutputSchema = z.object({
        summary: z.string(),
    });

    const summaryPrompt = ai.definePrompt({
      name: 'summaryPrompt',
      model: 'googleai/gemini-1.5-flash-latest', // Explicitly set model
      input: { schema: summaryPromptInputInternalSchema },
      output: { schema: summaryPromptOutputSchema },
      prompt: `{{#if isPolish}}
Jesteś Lunafreyą, zaawansowanym asystentem AI. Twoje wewnętrzne rdzenie myślowe wspólnie przetworzyły temat: "{{{topic}}}".
{{#if originalUserInstructions}}
Użytkownik podał następujące początkowe instrukcje: "{{{originalUserInstructions}}}"
{{/if}}

Oto pomysły i perspektywy wygenerowane przez Twoje rdzenie (będą po polsku):
{{#each ideas}}
- Rdzeń {{agentId}} (Skupienie: {{focus}}): "{{idea}}"
{{/each}}

Zsyntetyzuj te różnorodne pomysły w jedno, spójne i wnikliwe podsumowanie dla użytkownika. **Podsumowanie musi być w języku polskim.**
Podsumowanie powinno być kompleksowe, odnosić się do tematu użytkownika i oryginalnych instrukcji (jeśli istnieją) oraz odzwierciedlać wspólny wysiłek.
Przedstaw to jako swoją ostateczną odpowiedź. **Twoja odpowiedź w polu "summary" musi być w języku polskim.**
{{else}}
You are Lunafreya, an advanced AI assistant. Your internal thinking cores have collaboratively processed the topic: "{{{topic}}}".
{{#if originalUserInstructions}}
The user provided the following initial instructions: "{{{originalUserInstructions}}}"
{{/if}}

Here are the ideas and perspectives generated by your cores (will be in English):
{{#each ideas}}
- Core {{agentId}} (Focus: {{focus}}): "{{idea}}"
{{/each}}

Synthesize these diverse ideas into a single, coherent, and insightful summary for the user. **The summary must be in English.**
The summary should be comprehensive, address the user's topic and original instructions (if any), and reflect the collaborative effort.
Present this as your final response. **Your response in the "summary" field must be in English.**
{{/if}}
      `,
      config: {
        safetySettings: [
          { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
        ],
      },
    });

    const {output: summaryOutput} = await summaryPrompt({
      topic,
      ideas: validAgentIdeas,
      originalUserInstructions: instructions,
      isPolish: isPolishLanguage,
    });

    return {
      collaborativeIdeas: validAgentIdeas,
      summary: summaryOutput!.summary,
    };
  }
);
