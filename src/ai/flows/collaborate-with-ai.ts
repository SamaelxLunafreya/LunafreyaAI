// src/ai/flows/collaborate-with-ai.ts
'use server';

/**
 * @fileOverview Implements the collaborateWithAi flow, which allows users to engage multiple specialized AI thinking cores within Lunafreya for collaborative thinking, gathering diverse perspectives and innovative ideas on complex topics.
 *
 * - collaborateWithAi - A function that orchestrates the collaborative AI thinking process.
 * - CollaborateWithAiInput - The input type for the collaborateWithAi function.
 * - CollaborateWithAiOutput - The return type for the collaborateWithAi function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const CollaborateWithAiInputSchema = z.object({
  topic: z.string().describe('The topic for collaborative thinking.'),
  aiAgentCount: z.number().min(1).default(2).describe('The number of Lunafreya\'s AI cores to involve in the collaboration. Min is 1.'),
  instructions: z.string().optional().describe('Optional general instructions for Lunafreya\'s collaborative process.'),
});
export type CollaborateWithAiInput = z.infer<typeof CollaborateWithAiInputSchema>;

// Define the output schema for the flow
const CollaborateWithAiOutputSchema = z.object({
  collaborativeIdeas: z.array(
    z.object({
      agentId: z.number().describe('The ID of the AI core.'),
      idea: z.string().describe('The idea generated by the AI core.'),
      focus: z.string().describe('The focus of this AI core for the task.')
    })
  ).describe('A list of ideas generated by Lunafreya\'s AI cores.'),
  summary: z.string().describe('A summary of the collaborative thinking process from Lunafreya.'),
});
export type CollaborateWithAiOutput = z.infer<typeof CollaborateWithAiOutputSchema>;

// Exported function to initiate the collaborative AI thinking process
export async function collaborateWithAi(input: CollaborateWithAiInput): Promise<CollaborateWithAiOutput> {
  return collaborateWithAiFlow(input);
}

// Define the input for the internal AI agent prompt
const AiAgentPromptInputSchema = z.object({
  topic: z.string().describe('The topic for discussion.'),
  agentId: z.number().describe('The ID of the AI core.'),
  overallInstructions: z.string().describe('Overall instructions for the collaboration from the user.'),
  agentFocus: z.string().describe("The specific thinking style or focus for this AI core."),
});

// Define the prompt for a single AI core
const aiAgentPrompt = ai.definePrompt({
  name: 'aiAgentPrompt',
  input: {schema: AiAgentPromptInputSchema},
  output: z.object({
    agentId: z.number().describe('The ID of the AI core.'),
    idea: z.string().describe('The idea generated by the AI core.'),
    focus: z.string().describe('The focus of this AI core for the task.')
  }),
  prompt: `You are AI Core #{{agentId}}, one of Lunafreya's specialized thinking units.
Lunafreya is an advanced AI assistant powered by Google's Gemini model.

Topic for collaborative discussion:
{{{topic}}}

Your specific analytical approach/focus for this task as Core #{{agentId}} is:
"{{{agentFocus}}}"

Overall instructions for Lunafreya's collaborative process from the user:
"{{{overallInstructions}}}"

Based on the topic, your specific focus, and the user's overall instructions, generate one distinct idea, insight, or perspective.
Return a JSON object containing "agentId" (which is {{agentId}}), your "focus" ("{{{agentFocus}}}"), and your "idea".
Ensure your "idea" is unique, insightful, and directly contributes to a multifaceted understanding of the topic.
`,
});

// Define the array of possible focuses for the AI cores
const agentFocuses = [
  "Focus on logical analysis, breaking down the problem, and identifying practical, step-by-step solutions.",
  "Focus on creative brainstorming, generating novel ideas, exploring unconventional perspectives, and thinking 'outside the box'.",
  "Focus on critical evaluation, identifying potential challenges, risks, assumptions, and ethical considerations.",
  "Focus on user impact and empathy, considering how the topic relates to human experiences, needs, and emotions.",
  "Focus on future implications, long-term trends, potential innovations, and strategic foresight related to the topic.",
  "Focus on synthesizing information, connecting disparate ideas, and forming a holistic overview of the topic."
];

// Define the flow for collaborative thinking with multiple AI cores
const collaborateWithAiFlow = ai.defineFlow(
  {
    name: 'collaborateWithAiFlow',
    inputSchema: CollaborateWithAiInputSchema,
    outputSchema: CollaborateWithAiOutputSchema,
  },
  async input => {
    const {topic, aiAgentCount, instructions} = input;

    // Generate ideas from multiple AI cores in parallel
    const agentIdeasResults = await Promise.all(
      Array.from({length: aiAgentCount}, (_, i) => i + 1).map(async agentId => {
        const agentIndex = agentId - 1;
        let agentFocusDescription: string;

        if (aiAgentCount === 1) {
            agentFocusDescription = "Provide a comprehensive primary perspective, considering multiple angles.";
        } else if (aiAgentCount <= agentFocuses.length) {
            agentFocusDescription = agentFocuses[agentIndex];
        } else {
            // Cycle through focuses if more agents than defined focuses
            agentFocusDescription = agentFocuses[agentIndex % agentFocuses.length];
        }

        const {output} = await aiAgentPrompt({
          topic,
          agentId,
          overallInstructions: instructions ?? 'Please provide one innovative idea relevant to your focus.',
          agentFocus: agentFocusDescription,
        });
        // Ensure output is not null and contains agentId, idea, and focus
        if (!output || typeof output.agentId !== 'number' || typeof output.idea !== 'string' || typeof output.focus !== 'string') {
            console.warn(`AI Core ${agentId} did not return a valid output. Using fallback.`);
            return { agentId, idea: `Core ${agentId} (Focus: ${agentFocusDescription}) had a thought but it could not be processed.`, focus: agentFocusDescription };
        }
        return output;
      })
    );
    
    // Filter out any null/undefined results if any errors occurred despite fallback
    const validAgentIdeas = agentIdeasResults.filter(idea => idea !== null && idea !== undefined) as { agentId: number; idea: string; focus: string; }[];


    // Summarize the collaborative thinking process
    const summaryPromptInputSchema = z.object({
      topic: z.string(),
      ideas: z.array(z.object({agentId: z.number(), idea: z.string(), focus: z.string()})).describe('Ideas generated by the AI cores, including their focus.'),
      originalUserInstructions: z.string().optional(),
    });
    const summaryPromptOutputSchema = z.object({
        summary: z.string(),
    });

    const summaryPrompt = ai.definePrompt({
      name: 'summaryPrompt',
      input: { schema: summaryPromptInputSchema },
      output: { schema: summaryPromptOutputSchema },
      prompt: `You are Lunafreya, an advanced AI assistant. Your internal thinking cores have collaboratively processed the topic: "{{{topic}}}".
      {{#if originalUserInstructions}}
      The user provided these initial instructions: "{{{originalUserInstructions}}}"
      {{/if}}

      Here are the ideas and perspectives generated by your cores:
      {{#each ideas}}
      - Core {{agentId}} (Focus: {{focus}}): "{{idea}}"
      {{/each}}

      Synthesize these diverse ideas into a single, coherent, and insightful summary for the user.
      The summary should be comprehensive, address the user's topic and original instructions (if any), and reflect the collaborative effort.
      Present this as your final response.
      `,
    });

    const {output: summaryOutput} = await summaryPrompt({
      topic,
      ideas: validAgentIdeas,
      originalUserInstructions: instructions,
    });

    return {
      collaborativeIdeas: validAgentIdeas,
      summary: summaryOutput!.summary,
    };
  }
);
