// src/ai/flows/collaborate-with-ai.ts
'use server';

/**
 * @fileOverview Implements the collaborateWithAi flow, which allows users to engage multiple AI agents in collaborative thinking to gather diverse perspectives and innovative ideas on complex topics.
 *
 * - collaborateWithAi - A function that orchestrates the collaborative AI thinking process.
 * - CollaborateWithAiInput - The input type for the collaborateWithAi function.
 * - CollaborateWithAiOutput - The return type for the collaborateWithAi function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const CollaborateWithAiInputSchema = z.object({
  topic: z.string().describe('The topic for collaborative thinking.'),
  aiAgentCount: z.number().min(2).default(3).describe('The number of AI agents to involve in the collaboration. Minimum is 2.'),
  instructions: z.string().optional().describe('Optional instructions for the AI agents.'),
});
export type CollaborateWithAiInput = z.infer<typeof CollaborateWithAiInputSchema>;

// Define the output schema for the flow
const CollaborateWithAiOutputSchema = z.object({
  collaborativeIdeas: z.array(
    z.object({
      agentId: z.number().describe('The ID of the AI agent.'),
      idea: z.string().describe('The idea generated by the AI agent.'),
    })
  ).describe('A list of ideas generated by the AI agents.'),
  summary: z.string().describe('A summary of the collaborative thinking process.'),
});
export type CollaborateWithAiOutput = z.infer<typeof CollaborateWithAiOutputSchema>;

// Exported function to initiate the collaborative AI thinking process
export async function collaborateWithAi(input: CollaborateWithAiInput): Promise<CollaborateWithAiOutput> {
  return collaborateWithAiFlow(input);
}

// Define the prompt for a single AI agent
const aiAgentPrompt = ai.definePrompt({
  name: 'aiAgentPrompt',
  input: {schema: CollaborateWithAiInputSchema},
  output: z.object({
    agentId: z.number().describe('The ID of the AI agent.'),
    idea: z.string().describe('The idea generated by the AI agent.'),
  }),
  prompt: `You are AI agent #{{agentId}} participating in a collaborative thinking session about the topic: {{{topic}}}.

  Instructions:
  {{{instructions}}}

  Generate one innovative idea related to the topic.
  Format your response as a JSON object with \"agentId\" and \"idea\" fields.
  `, 
});

// Define the flow for collaborative thinking with multiple AI agents
const collaborateWithAiFlow = ai.defineFlow(
  {
    name: 'collaborateWithAiFlow',
    inputSchema: CollaborateWithAiInputSchema,
    outputSchema: CollaborateWithAiOutputSchema,
  },
  async input => {
    const {topic, aiAgentCount, instructions} = input;

    // Generate ideas from multiple AI agents in parallel
    const agentIdeas = await Promise.all(
      Array.from({length: aiAgentCount}, (_, i) => i + 1).map(async agentId => {
        const {output} = await aiAgentPrompt({
          ...input,
          agentId,
          instructions: instructions ?? 'Please provide one innovative idea.',
        });
        return output!;
      })
    );

    // Summarize the collaborative thinking process
    const summaryPrompt = ai.definePrompt({
      name: 'summaryPrompt',
      input: z.object({
        topic: z.string(),
        ideas: z.string().describe('Ideas generated by the AI agents.'),
      }),
      output: z.object({
        summary: z.string(),
      }),
      prompt: `Summarize the collaborative thinking session on the topic: {{{topic}}}.\n\n      The ideas generated by the AI agents are as follows:\n      {{{ideas}}}

      Provide a concise summary of the session.
      `,  
    });

    const ideasString = JSON.stringify(agentIdeas.map(idea => `Agent ${idea.agentId}: ${idea.idea}`));
    const {output: summaryOutput} = await summaryPrompt({
      topic,
      ideas: ideasString,
    });

    return {
      collaborativeIdeas: agentIdeas,
      summary: summaryOutput!.summary,
    };
  }
);
