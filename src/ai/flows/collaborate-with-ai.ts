
// src/ai/flows/collaborate-with-ai.ts
'use server';

/**
 * @fileOverview Implements the collaborateWithAi flow, which allows users to engage multiple specialized AI thinking cores within Lunafreya for collaborative thinking, gathering diverse perspectives and innovative ideas on complex topics.
 *
 * - collaborateWithAi - A function that orchestrates the collaborative AI thinking process.
 * - CollaborateWithAiInput - The input type for the collaborateWithAi function.
 * - CollaborateWithAiOutput - The return type for the collaborateWithAi function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the flow
const CollaborateWithAiInputSchema = z.object({
  topic: z.string().describe('The topic for collaborative thinking.'),
  aiAgentCount: z.number().min(1).default(2).describe('The number of Lunafreya\'s AI cores to involve in the collaboration. Min is 1.'),
  instructions: z.string().optional().describe('Optional general instructions for Lunafreya\'s collaborative process.'),
});
export type CollaborateWithAiInput = z.infer<typeof CollaborateWithAiInputSchema>;

// Define the output schema for the flow
const CollaborateWithAiOutputSchema = z.object({
  collaborativeIdeas: z.array(
    z.object({
      agentId: z.number().describe('The ID of the AI core.'),
      idea: z.string().describe('The idea generated by the AI core.'),
      focus: z.string().describe('The focus of this AI core for the task.')
    })
  ).describe('A list of ideas generated by Lunafreya\'s AI cores.'),
  summary: z.string().describe('A summary of the collaborative thinking process from Lunafreya.'),
});
export type CollaborateWithAiOutput = z.infer<typeof CollaborateWithAiOutputSchema>;

// Exported function to initiate the collaborative AI thinking process
export async function collaborateWithAi(input: CollaborateWithAiInput): Promise<CollaborateWithAiOutput> {
  return collaborateWithAiFlow(input);
}

// Define the input for the internal AI agent prompt
const AiAgentPromptInputSchema = z.object({
  topic: z.string().describe('The topic for discussion.'),
  agentId: z.number().describe('The ID of the AI core.'),
  overallInstructions: z.string().describe('Overall instructions for the collaboration from the user.'),
  agentFocus: z.string().describe("The specific thinking style or focus for this AI core."),
});

// Define the prompt for a single AI core
const aiAgentPrompt = ai.definePrompt({
  name: 'aiAgentPrompt',
  input: {schema: AiAgentPromptInputSchema},
  output: z.object({
    agentId: z.number().describe('The ID of the AI core.'),
    idea: z.string().describe('The idea generated by the AI core.'),
    focus: z.string().describe('The focus of this AI core for the task.')
  }),
  prompt: `Jesteś Rdzeniem AI #{{agentId}}, jedną ze specjalistycznych jednostek myślowych Lunafreyi.
Lunafreya to zaawansowany asystent AI oparty na modelu Gemini od Google.

Temat do wspólnej dyskusji (może być po angielsku, odpowiadaj po polsku):
{{{topic}}}

Twój specyficzny analityczny sposób podejścia/skupienie dla tego zadania jako Rdzeń #{{agentId}} to:
"{{{agentFocus}}}"

Ogólne instrukcje dla procesu współpracy Lunafreyi od użytkownika (mogą być po angielsku, ale odpowiedź zawsze po polsku):
"{{{overallInstructions}}}"

Na podstawie tematu, twojego specyficznego skupienia i ogólnych instrukcji użytkownika, wygeneruj jeden odrębny pomysł, spostrzeżenie lub perspektywę. **Odpowiedz w języku polskim.**
Zwróć obiekt JSON zawierający "agentId" (które jest {{agentId}}), twój "focus" ("{{{agentFocus}}}") oraz twój "pomysł" (w polu "idea").
Upewnij się, że twój "pomysł" jest unikalny, wnikliwy i bezpośrednio przyczynia się do wieloaspektowego zrozumienia tematu. **Twoja odpowiedź w polu "idea" musi być w języku polskim.**
`,
});

// Define the array of possible focuses for the AI cores
const agentFocuses = [
  "Skupienie na analizie logicznej, rozkładaniu problemu na czynniki pierwsze i identyfikowaniu praktycznych, krok po kroku rozwiązań.",
  "Skupienie na kreatywnej burzy mózgów, generowaniu nowatorskich pomysłów, eksplorowaniu niekonwencjonalnych perspektyw i myśleniu 'poza schematami'.",
  "Skupienie na krytycznej ocenie, identyfikowaniu potencjalnych wyzwań, ryzyk, założeń i względów etycznych.",
  "Skupienie na wpływie na użytkownika i empatii, rozważaniu, jak temat odnosi się do ludzkich doświadczeń, potrzeb i emocji.",
  "Skupienie na przyszłych implikacjach, długoterminowych trendach, potencjalnych innowacjach i strategicznym przewidywaniu związanym z tematem.",
  "Skupienie na syntezie informacji, łączeniu odległych pomysłów i tworzeniu holistycznego przeglądu tematu."
];

// Define the flow for collaborative thinking with multiple AI cores
const collaborateWithAiFlow = ai.defineFlow(
  {
    name: 'collaborateWithAiFlow',
    inputSchema: CollaborateWithAiInputSchema,
    outputSchema: CollaborateWithAiOutputSchema,
  },
  async input => {
    const {topic, aiAgentCount, instructions} = input;

    // Generate ideas from multiple AI cores in parallel
    const agentIdeasResults = await Promise.all(
      Array.from({length: aiAgentCount}, (_, i) => i + 1).map(async agentId => {
        const agentIndex = agentId - 1;
        let agentFocusDescription: string;

        if (aiAgentCount === 1) {
            agentFocusDescription = "Dostarcz kompleksową, główną perspektywę, biorąc pod uwagę wiele aspektów.";
        } else if (aiAgentCount <= agentFocuses.length) {
            agentFocusDescription = agentFocuses[agentIndex];
        } else {
            // Cycle through focuses if more agents than defined focuses
            agentFocusDescription = agentFocuses[agentIndex % agentFocuses.length];
        }

        const {output} = await aiAgentPrompt({
          topic,
          agentId,
          overallInstructions: instructions ?? 'Proszę dostarczyć jeden innowacyjny pomysł związany z Twoim skupieniem. Odpowiedz po polsku.',
          agentFocus: agentFocusDescription,
        });
        if (!output || typeof output.agentId !== 'number' || typeof output.idea !== 'string' || typeof output.focus !== 'string') {
            console.warn(`Rdzeń AI ${agentId} nie zwrócił poprawnego wyniku. Używam odpowiedzi zastępczej.`);
            return { agentId, idea: `Rdzeń ${agentId} (Skupienie: ${agentFocusDescription}) miał pomysł, ale nie mógł zostać przetworzony.`, focus: agentFocusDescription };
        }
        return output;
      })
    );
    
    const validAgentIdeas = agentIdeasResults.filter(idea => idea !== null && idea !== undefined) as { agentId: number; idea: string; focus: string; }[];

    const summaryPromptInputSchema = z.object({
      topic: z.string(),
      ideas: z.array(z.object({agentId: z.number(), idea: z.string(), focus: z.string()})).describe('Pomysły wygenerowane przez rdzenie AI, włączając ich skupienie.'),
      originalUserInstructions: z.string().optional(),
    });
    const summaryPromptOutputSchema = z.object({
        summary: z.string(),
    });

    const summaryPrompt = ai.definePrompt({
      name: 'summaryPrompt',
      input: { schema: summaryPromptInputSchema },
      output: { schema: summaryPromptOutputSchema },
      prompt: `Jesteś Lunafreyą, zaawansowanym asystentem AI. Twoje wewnętrzne rdzenie myślowe wspólnie przetworzyły temat (temat może być po angielsku): "{{{topic}}}".
      {{#if originalUserInstructions}}
      Użytkownik podał następujące początkowe instrukcje (mogą być po angielsku, ale odpowiedź zawsze po polsku): "{{{originalUserInstructions}}}"
      {{/if}}

      Oto pomysły i perspektywy wygenerowane przez Twoje rdzenie (będą po polsku):
      {{#each ideas}}
      - Rdzeń {{agentId}} (Skupienie: {{focus}}): "{{idea}}"
      {{/each}}

      Zsyntetyzuj te różnorodne pomysły w jedno, spójne i wnikliwe podsumowanie dla użytkownika. **Podsumowanie musi być w języku polskim.**
      Podsumowanie powinno być kompleksowe, odnosić się do tematu użytkownika i oryginalnych instrukcji (jeśli istnieją) oraz odzwierciedlać wspólny wysiłek.
      Przedstaw to jako swoją ostateczną odpowiedź. **Twoja odpowiedź w polu "summary" musi być w języku polskim.**
      `,
    });

    const {output: summaryOutput} = await summaryPrompt({
      topic,
      ideas: validAgentIdeas,
      originalUserInstructions: instructions,
    });

    return {
      collaborativeIdeas: validAgentIdeas,
      summary: summaryOutput!.summary,
    };
  }
);
